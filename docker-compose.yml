version: "3.9"

services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: backend
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: on-failure

  frontend:
    build:
      context: ./frontend  
      dockerfile: Dockerfile
    container_name: frontend
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "3000:3000"
    environment:
      - BACKEND_URL=http://backend:8000/api/v1
    depends_on:
      - backend
    networks:
      - app-network

  db:
    image: postgres:14
    platform: linux/amd64 
    container_name: db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: todo-app
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

volumes:
  pg_data:
  frontend_node_modules:

networks:
  app-network:
    driver: bridge